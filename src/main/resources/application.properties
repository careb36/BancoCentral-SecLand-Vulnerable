# ===================================================================
# CONFIGURACI\u00D3N GENERAL DE LA APLICACI\u00D3N
# ===================================================================

# Nombre de la aplicaci\u00F3n que se mostrar\u00E1 en logs, etc.
spring.application.name=BancoCentral-SecLand

# ===================================================================
# CONFIGURACI\u00D3N DE LA CONEXI\u00D3N A LA BASE DE DATOS (DATASOURCE)
# ===================================================================
# Esta secci\u00F3n le dice a Spring Boot c\u00F3mo encontrar y autenticarse con nuestra base de datos PostgreSQL.

# La URL de conexi\u00F3n JDBC. Indica el tipo de base de datos (postgresql),
# el host (localhost, porque nos conectamos desde nuestra m\u00E1quina al puerto expuesto por Docker),
# el puerto (5432) y el nombre de la base de datos a la que nos conectaremos (bancocentral).
spring.datasource.url=jdbc:postgresql://localhost:5432/bancocentral

# El nombre de usuario para acceder a la base de datos, definido en nuestro docker-compose.yaml.
spring.datasource.username=postgres

# La contrase\u00F1a para el usuario de la base de datos, definida en nuestro docker-compose.yaml.
spring.datasource.password=root


# ===================================================================
# CONFIGURACI\u00D3N DE HIBERNATE (JPA - PERSISTENCIA)
# ===================================================================
# Esta secci\u00F3n configura c\u00F3mo nuestro ORM (Hibernate) interact\u00FAa con la estructura de la base de datos.

# Define la estrategia de generaci\u00F3n del esquema (Data Definition Language - DDL).
# 'update': Hibernate comparar\u00E1 nuestras clases @Entity con las tablas existentes y
# autom\u00E1ticamente a\u00F1adir\u00E1 columnas o crear\u00E1 tablas si no existen.
# ADVERTENCIA: 'update' es excelente para desarrollo, pero en producci\u00F3n se usan sistemas de migraci\u00F3n m\u00E1s controlados (como Flyway o Liquibase).
spring.jpa.hibernate.ddl-auto=update

# Le dice a Spring que espere a que Hibernate/JPA haya creado el esquema de la base de datos
# ANTES de intentar ejecutar los scripts de inicializaci\u00F3n (data.sql).
# Esto previene errores de "tabla no encontrada" durante el arranque.
spring.jpa.defer-datasource-initialization=true


# ===================================================================
# CONFIGURACI\u00D3N DE LA INICIALIZACI\u00D3N DE DATOS SQL
# ===================================================================
# Esta secci\u00F3n controla la ejecuci\u00F3n de los scripts SQL iniciales.

# Define cu\u00E1ndo se deben ejecutar los scripts de inicializaci\u00F3n (como nuestro data.sql).
# 'always': Ejecuta siempre los scripts, sin importar si la base de datos es embebida o externa.
# Esto es perfecto para nuestro entorno de desarrollo, para asegurar que siempre tengamos datos de prueba.
spring.sql.init.mode=always