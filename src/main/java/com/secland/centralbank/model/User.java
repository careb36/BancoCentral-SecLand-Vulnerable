package com.secland.centralbank.model;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.Data;

/**
 * Entity representing an application user.
 * <p>
 * Maps to the {@code users} table in the database and stores user credentials, profile data,
 * and the relationship to the user's bank accounts.
 * </p>
 * <ul>
 *   <li>Auto-generated primary key</li>
 *   <li>Unique username for authentication</li>
 *   <li>Hashed password for secure authentication</li>
 *   <li>Full user name for display and reporting</li>
 *   <li>Creation timestamp</li>
 *   <li>One-to-many relationship with {@link Account} entities</li>
 * </ul>
 */
@Data
@Entity
@Table(name = "users")
public class User {

    /**
     * Primary key for the user entity, auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Unique username for login and authentication.
     * <p>
     * This field cannot be null or duplicated.
     * </p>
     */
    @Column(nullable = false, unique = true, length = 50)
    private String username;

    /**
     * Hashed password for user authentication.
     * <p>
     * This value must never be exposed in {@code toString()}, logs, or API responses for security reasons.
     * </p>
     */
    @Column(nullable = false)
    @JsonIgnore
    private String password;

    /**
     * Full name of the user.
     * <p>
     * Used for display in account overviews and statements.
     * </p>
     */
    @Column(name = "full_name", nullable = false, length = 100)
    private String fullName;

    /**
     * Timestamp indicating when the user record was created.
     * <p>
     * Automatically set at instantiation and never updated thereafter.
     * </p>
     */
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt = LocalDateTime.now();

    /**
     * One-to-many relationship: a user can have multiple associated bank accounts.
     * <p>
     * - Cascade all operations so deleting a user also removes their accounts.<br>
     * - Lazy fetching to avoid loading accounts unless needed.<br>
     * - Orphan removal to delete accounts not referenced by any user.
     * </p>
     */
    @OneToMany(
            mappedBy = "user",
            cascade = CascadeType.ALL,
            fetch = FetchType.LAZY,
            orphanRemoval = true
    )
    @JsonIgnoreProperties("user")
    private List<Account> accounts = new ArrayList<>();
}
