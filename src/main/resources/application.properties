# ===================================================================
# GENERAL APPLICATION CONFIGURATION
# ===================================================================
# The application name that will be used in logs and management endpoints.
spring.application.name=CentralBank-SecLand-Vulnerable

# ===================================================================
# DATABASE CONNECTION (DATASOURCE) CONFIGURATION
# ===================================================================
# This section configures how Spring Boot connects to the PostgreSQL database.

# The JDBC URL for the PostgreSQL database.
# Format: jdbc:postgresql://<host>:<port>/<databaseName>
spring.datasource.url=jdbc:postgresql://localhost:5432/secland_bank_db

# Credentials for the database user.
# These should match the values in your docker-compose.yaml or local DB setup.
spring.datasource.username=postgres
spring.datasource.password=root

# ===================================================================
# HIBERNATE & JPA CONFIGURATION
# ===================================================================
# This section controls the behavior of the Java Persistence API (JPA)
# and its implementation, Hibernate.

# Defines the schema generation strategy.
# 'update': Hibernate compares the @Entity models with the database schema and
# automatically adds tables or columns if they are missing. Ideal for development.
# WARNING: This is unsafe for production. Use a migration tool like Flyway or Liquibase instead.
spring.jpa.hibernate.ddl-auto=update

# This is a critical setting that fixes the startup race condition.
# It tells Spring to wait until Hibernate has finished creating/updating the schema
# BEFORE attempting to run the data.sql script.
spring.jpa.defer-datasource-initialization=true

# ===================================================================
# DATABASE INITIALIZATION CONFIGURATION
# ===================================================================

# Controls the execution of SQL initialization scripts (e.g., data.sql).
# 'always': Ensures that data.sql is always executed on startup, which is
# perfect for populating our development database with test data.
spring.sql.init.mode=always

# Explicitly disable Flyway's auto-configuration.
# This prevents the "Unsupported Database" error by telling Spring Boot
# not to manage the database schema with Flyway.
spring.flyway.enabled=false

# ===================================================================
# DEBUG LOGGING CONFIGURATION
# ===================================================================
# Increases the log verbosity for specific Spring packages to aid in debugging.

# Enable DEBUG logs for Spring Security to see detailed authentication flow.
logging.level.org.springframework.security=DEBUG

# Enable DEBUG logs for Spring Web to see details about incoming requests.
logging.level.org.springframework.web=DEBUG