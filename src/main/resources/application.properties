# ===================================================================
# SecLand Central Bank - Vulnerable Banking Application Configuration
# ===================================================================
# 
# EDUCATIONAL SECURITY WARNING:
# This application contains intentional security vulnerabilities
# designed for educational purposes. NEVER use in production!
#
# Configuration Version: 1.0.0-SNAPSHOT
# Last Updated: 2025-01-19
# 
# ===================================================================

# ===================================================================
# APPLICATION IDENTITY & METADATA
# ===================================================================

# Primary application identifier used throughout Spring Boot ecosystem
spring.application.name=SecLand-CentralBank-Vulnerable-Educational

# Application description for management endpoints
management.info.app.name=SecLand Central Bank Educational Application
management.info.app.description=Intentionally vulnerable banking application for cybersecurity education
management.info.app.version=1.0.0-SNAPSHOT
management.info.app.encoding=UTF-8
management.info.java.version=${java.version}

# ===================================================================
# DATABASE CONNECTION CONFIGURATION
# ===================================================================
# PostgreSQL 15 database configuration for educational environment
# 
# SECURITY NOTE: These settings include intentional misconfigurations
# for educational purposes. In production, use environment variables
# and proper credential management.

# Primary database connection URL
# Format: jdbc:postgresql://<host>:<port>/<database>
# Container orchestration will override host via environment variables
spring.datasource.url=jdbc:postgresql://localhost:5432/secland_bank_db

# Database authentication credentials
# WARNING: Hardcoded credentials are a security vulnerability (CWE-798)
# This is intentional for educational demonstration
spring.datasource.username=postgres
spring.datasource.password=

# Connection pool configuration for educational load testing
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.idle-timeout=300000

# ===================================================================
# JPA & HIBERNATE CONFIGURATION
# ===================================================================
# Object-Relational Mapping configuration with educational considerations

# Schema management strategy
# 'none': Production-ready approach using Flyway for migrations
# This prevents accidental schema modifications in production
spring.jpa.hibernate.ddl-auto=none

# Database initialization sequencing
# Ensures proper startup order: Schema → Hibernate → Data Scripts
spring.jpa.defer-datasource-initialization=true

# SQL dialect configuration for PostgreSQL optimization
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Performance and debugging configuration
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true

# ===================================================================
# DATABASE INITIALIZATION & SEEDING
# ===================================================================
# Educational data population for testing and demonstrations

# SQL script execution strategy
# 'always': Ensures consistent test data across environment resets
# Essential for educational environments with frequent redeployments
spring.sql.init.mode=always

# Script execution order and configuration
spring.sql.init.continue-on-error=false
spring.sql.init.separator=;
spring.sql.init.encoding=UTF-8

# ===================================================================
# SECURITY CONFIGURATION (INTENTIONALLY WEAK)
# ===================================================================
# These settings contain deliberate security weaknesses for education

# JWT Configuration with educational vulnerabilities
jwt.secret=mySecretKey
jwt.expiration=86400000

# Session management with intentional flaws
server.servlet.session.timeout=30m
server.servlet.session.cookie.secure=false
server.servlet.session.cookie.http-only=false

# ===================================================================
# FLYWAY DATABASE MIGRATION CONFIGURATION
# ===================================================================
# Professional database version control and schema management

# Enable Flyway for production-ready database migrations
spring.flyway.enabled=true

# Migration script locations
spring.flyway.locations=classpath:db/migration

# Baseline configuration for existing databases
spring.flyway.baseline-on-migrate=true
spring.flyway.baseline-version=1.0.0

# Migration validation and error handling
spring.flyway.validate-on-migrate=true
spring.flyway.clean-disabled=true

# ===================================================================
# LOGGING CONFIGURATION FOR EDUCATIONAL ANALYSIS
# ===================================================================
# Enhanced logging for security research and vulnerability analysis

# Root logging level
logging.level.root=INFO

# Application-specific logging for educational analysis
logging.level.com.secland.centralbank=DEBUG

# Security-related logging for attack demonstration
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.authentication=TRACE
logging.level.org.springframework.security.access=DEBUG

# Web request logging for vulnerability analysis
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG

# Database interaction logging for SQL injection demonstrations
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.springframework.jdbc.core=DEBUG

# HTTP client logging for external service calls
logging.level.org.springframework.web.client=DEBUG

# Transaction management logging
logging.level.org.springframework.transaction=DEBUG

# ===================================================================
# SERVER CONFIGURATION WITH SECURITY CONSIDERATIONS
# ===================================================================
# Web server settings with intentional misconfigurations for education

# Primary server port
server.port=8080

# Error handling configuration (intentionally verbose for education)
server.error.include-message=always
server.error.include-binding-errors=always
server.error.include-stacktrace=always
server.error.include-exception=true

# Session configuration with security implications
server.servlet.session.persistent=false
server.servlet.session.store-dir=/tmp/tomcat-sessions

# ===================================================================
# CORS CONFIGURATION (INTENTIONALLY PERMISSIVE)
# ===================================================================
# Cross-Origin Resource Sharing with educational security flaws

# Global CORS configuration - INTENTIONALLY INSECURE
management.endpoints.web.cors.allowed-origins=*
management.endpoints.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
management.endpoints.web.cors.allowed-headers=*
management.endpoints.web.cors.allow-credentials=true

# ===================================================================
# ACTUATOR ENDPOINTS FOR EDUCATIONAL MONITORING
# ===================================================================
# Management and monitoring endpoints for educational analysis

# Enable all actuator endpoints for educational inspection
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always

# Security configuration for actuator endpoints
management.security.enabled=false

# ===================================================================
# MULTIPART FILE UPLOAD CONFIGURATION
# ===================================================================
# File upload settings with intentional security vulnerabilities

# Enable multipart uploads with generous limits
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# File storage configuration (potential path traversal vulnerability)
file.upload-dir=./uploads

# ===================================================================
# EDUCATIONAL NOTES & DOCUMENTATION REFERENCES
# ===================================================================
#
# Security Vulnerabilities Demonstrated in This Configuration:
# 
# 1. CWE-798: Hardcoded credentials in configuration files
# 2. CWE-209: Information exposure through error messages
# 3. CWE-942: Overly permissive CORS policy
# 4. CWE-16: Security misconfiguration in session management
# 5. CWE-200: Information disclosure through verbose logging
# 6. CWE-284: Improper access control on management endpoints
# 
# Learning Objectives:
# - Understand configuration-based security vulnerabilities
# - Learn proper credential management practices
# - Explore the impact of verbose error reporting
# - Analyze CORS policy implications
# - Study logging security considerations
#
# Remediation Guidelines:
# - Use environment variables for sensitive configuration
# - Implement proper error handling without information disclosure
# - Configure restrictive CORS policies for production
# - Enable security on management endpoints
# - Implement structured logging with security considerations
#
# References:
# - OWASP Configuration Security Cheat Sheet
# - Spring Boot Security Best Practices
# - CWE/SANS Top 25 Software Errors
#
# ===================================================================
