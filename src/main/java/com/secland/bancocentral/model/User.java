package com.secland.bancocentral.model;

import jakarta.persistence.*;
import lombok.Data;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents an application user.
 * <p>
 * Maps to the "users" table and stores credentials, profile data,
 * and relationships to the user’s bank accounts.
 * </p>
 */
@Data
@Entity
@Table(name = "users")
public class User {

    /** Primary key – auto-generated by the database. */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Unique username for login.
     * Cannot be null or duplicated.
     */
    @Column(nullable = false, unique = true, length = 50)
    private String username;

    /**
     * Hashed password for authentication.
     * Must not be exposed in toString(), logs, or API responses.
     */
    @Column(nullable = false)
    private String password;

    /**
     * Full name of the user.
     * Stored for display purposes in account overviews and statements.
     */
    @Column(name = "full_name", nullable = false, length = 100)
    private String fullName;

    /**
     * Timestamp when the user record was created.
     * Automatically set at instantiation and never updated.
     */
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt = LocalDateTime.now();

    /**
     * One-to-many relationship: a user can have multiple bank accounts.
     * Cascade all operations so that deleting a user also removes their accounts.
     * Lazy fetch to avoid loading accounts unless needed.
     */
    @OneToMany(
            mappedBy = "user",
            cascade = CascadeType.ALL,
            fetch = FetchType.LAZY,
            orphanRemoval = true
    )
    private List<Account> accounts = new ArrayList<>();
}